/* Generated by MyraPad at 06/11/2020 18:57:04 */
using Myra.Graphics2D.UI;
using System;
using System.Linq;
using System.Collections.Generic;

namespace Rivi√®re.Screen.UI
{
	public partial class LobbyScreenUI
	{
		public LobbyScreenUI()
		{
			BuildUI();
		}

		public void AddPlayerLine(string playerName, int indexOfPlayer, Action<string> OnRemovePlayerLine)
        {
            // Create a new "playername" label, based on the existing one.
            // => See the Myra project to know which field should be copied from the ref.
            Label playernameLabel = new Label();
            playernameLabel.Text = playerName;
            playernameLabel.Font = playername_label.Font;
            playernameLabel.TextColor = playername_label.TextColor;
            playernameLabel.Padding = playername_label.Padding;
            playernameLabel.VerticalAlignment = playername_label.VerticalAlignment;
            playernameLabel.GridColumn = playername_label.GridColumn;
            playernameLabel.GridRow = indexOfPlayer;

            // Create a new "remove player" button, based on the existing one
            // => See the Myra project to know which field should be copied from the ref.
            ImageButton removeplayerButton = new ImageButton("transparent-bg");
            removeplayerButton.Image = removeplayer_button.Image;
            removeplayerButton.OverImage = removeplayer_button.OverImage;
            removeplayerButton.VerticalAlignment = removeplayer_button.VerticalAlignment;
            removeplayerButton.GridColumn = removeplayer_button.GridColumn;
            removeplayerButton.GridRow = indexOfPlayer;
            removeplayerButton.Click += (s, e) =>
            {
                OnRemovePlayerLine(playerName);
            };

            // Add widget to the grid
            playerslist_grid.RowsProportions.Add(new Proportion());
            playerslist_grid.Widgets.Add(playernameLabel);
            playerslist_grid.Widgets.Add(removeplayerButton);

            // Reset the text box
            playername_textbox.Text = "";
        }

		public void RemovePlayerLine(string playerName)
        {
            List<Widget> widgetsToRemove = new List<Widget>();

            // Get the line number of the player to remove
            int indexOfPlayer = -1;
            foreach (Widget widget in playerslist_grid.Widgets)
            {
                if (widget.GetType() == typeof(Label) && ((Label)widget).Text == playerName)
                {
                    indexOfPlayer = widget.GridRow;
                    break;
                }
            }

            // if the player has not being found, return.
            if (indexOfPlayer == -1)
                return;

            // Move all elements upward
            foreach (Widget widget in playerslist_grid.Widgets)
            {
                if (widget.GridRow == indexOfPlayer)
                    widgetsToRemove.Add(widget);
                if (widget.GridRow > indexOfPlayer)
                    widget.GridRow -= 1;
            }

            widgetsToRemove.ForEach(w => w.RemoveFromParent());

            // Remove the last row of the grid
            playerslist_grid.RowsProportions.Remove(playerslist_grid.RowsProportions.Last());
        }
	}
}
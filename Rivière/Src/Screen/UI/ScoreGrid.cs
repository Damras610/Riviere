/* Generated by MyraPad at 08/11/2020 21:48:36 */
using Microsoft.Xna.Framework;
using Myra.Graphics2D;
using Myra.Graphics2D.Brushes;
using Myra.Graphics2D.UI;
using System;
using System.Linq;
using System.Collections.Generic;

namespace Rivi√®re.Screen
{
	public partial class ScoreGrid
	{
		private class MutableLabelProperties
		{
			public string text;
			public Color textColor;
			public IBrush background;
		}

		/// <summary>
		/// The index of the first displayed movable column.
		/// </summary>
		private int movableColumnsPosition = 0;

		/// <summary>
		/// The index of the first displayed movable column.
		/// Everytime it is set, the grid is updated.
		/// </summary>
		public int MovableColumnsPosition
		{
			get => movableColumnsPosition;
			set
			{
				if (NumberOfColumnsInContent < NumberOfMovableColumns)
					movableColumnsPosition = 0;
				else
					movableColumnsPosition = Math.Clamp(value, 0, NumberOfColumnsInContent - NumberOfMovableColumns);

				UpdateMovableColumns();
			}
		}

		public const int NumberOfFixedColumns = 7;

		/// <summary>
		/// The number of movable columns displayed.
		/// </summary>
		public int NumberOfMovableColumns = 11;

		/// <summary>
		/// The number of columns in the content to set in the movable column
		/// </summary>
		public int NumberOfColumnsInContent { get; private set; }

		/// <summary>
		/// The content to insert in the movable columns.
		/// The dictionnary is index by the position of the text and the tuple is
		/// - the text
		/// - the color of the text
		/// - the background
		/// </summary>
		Dictionary<Vector2, MutableLabelProperties> contentOfMovableColumns;

		private bool ready = false;


		public ScoreGrid()
		{
			BuildUI();
		}

		public void PopulateGrid(List<string> firstColumnOfRows, List<string> firstRowOfMovableColumns)
		{
			// Clear the grid
			ClearGrid();
			// Populate Grid
			PopulateRows(firstColumnOfRows.Count);
			PopulateMovableColumns();
			PopulateLabelsInGrid();
			WriteFirstColumnsOfRows(firstColumnOfRows);

			// Store headers of movable columns
			contentOfMovableColumns = new Dictionary<Vector2, MutableLabelProperties>();
			StoreFirstRowOfMovableColumns(firstRowOfMovableColumns);
			NumberOfColumnsInContent = firstRowOfMovableColumns.Count;

			ready = true;
			MovableColumnsPosition = 0;
		}

		public void SetContentOfMovableColumns(int row, int column, string text, Color? textColor, Color? background)
		{
			if (!contentOfMovableColumns.ContainsKey(new Vector2(row, column)))
				contentOfMovableColumns.Add(new Vector2(row, column), new MutableLabelProperties()
				{
					text = "",
					textColor = gridcontent_label.TextColor,
					background = gridcontent_label.Background
				});

			if (text != null)
				contentOfMovableColumns[new Vector2(row, column)].text = text;
			if (textColor != null)
				contentOfMovableColumns[new Vector2(row, column)].textColor = (Color)textColor;
			if (background != null)
				contentOfMovableColumns[new Vector2(row, column)].background = new SolidBrush((Color)background);
			UpdateMovableColumns();
		}

		public void SetContentOfFixedColumns(int row, int column, string text, Color? textColor, Color? background)
		{
			if (row == 0 || column >= NumberOfFixedColumns)
				throw new Exception("Unable to modify the requested cell: row=" + row + ",column=" + column);

			Label label = GetLabelFromGridPosition(row, column);
			if (text != null)
				label.Text = text;
			if (textColor != null)
				label.TextColor = (Color)textColor;
			if (background != null)
				label.Background = new SolidBrush((Color)background);
		}

		private void PopulateRows(int numberOfRows)
		{
			for (int i = 0; i < numberOfRows; i++)
			{
				RowsProportions.Add(new Proportion(ProportionType.Part));
			}
		}

		private void PopulateMovableColumns()
		{
			for (int i = 0; i < NumberOfMovableColumns; i++)
			{
				ColumnsProportions.Add(new Proportion(ProportionType.Part));
			}
		}

		private void PopulateLabelsInGrid()
		{
			// Populate first columns of the rows
			for (int i = 1; i < RowsProportions.Count; i++)
			{
				Label firstColumnOfRowsLabel = new Label();
				firstColumnOfRowsLabel.Font = gridfirstcolumn_label.Font;
				firstColumnOfRowsLabel.TextAlign = gridfirstcolumn_label.TextAlign;
				firstColumnOfRowsLabel.TextColor = gridfirstcolumn_label.TextColor;
				firstColumnOfRowsLabel.Padding = gridfirstcolumn_label.Padding;
				firstColumnOfRowsLabel.HorizontalAlignment = gridfirstcolumn_label.HorizontalAlignment;
				firstColumnOfRowsLabel.VerticalAlignment = gridfirstcolumn_label.VerticalAlignment;
				firstColumnOfRowsLabel.Background = gridfirstcolumn_label.Background;
				firstColumnOfRowsLabel.GridRow = i;
				Widgets.Add(firstColumnOfRowsLabel);
			}

			// Populate first row of movable columns label
			for (int i = NumberOfFixedColumns; i < ColumnsProportions.Count; i++)
			{
				Label firstRowOfMovableColumnsLabel = new Label();
				firstRowOfMovableColumnsLabel.Font = gridfirstrowmovablecolumns_label.Font;
				firstRowOfMovableColumnsLabel.TextAlign = gridfirstrowmovablecolumns_label.TextAlign;
				firstRowOfMovableColumnsLabel.TextColor = gridfirstrowmovablecolumns_label.TextColor;
				firstRowOfMovableColumnsLabel.BorderThickness = gridfirstrowmovablecolumns_label.BorderThickness;
				firstRowOfMovableColumnsLabel.Padding = gridfirstrowmovablecolumns_label.Padding;
				firstRowOfMovableColumnsLabel.HorizontalAlignment = gridfirstrowmovablecolumns_label.HorizontalAlignment;
				firstRowOfMovableColumnsLabel.VerticalAlignment = gridfirstrowmovablecolumns_label.VerticalAlignment;
				firstRowOfMovableColumnsLabel.Background = gridfirstrowmovablecolumns_label.Background;
				firstRowOfMovableColumnsLabel.Border = gridfirstrowmovablecolumns_label.Border;
				firstRowOfMovableColumnsLabel.GridColumn = i;
				Widgets.Add(firstRowOfMovableColumnsLabel);
			}

			// Populate graylabels on row
			for (int i = 1; i < RowsProportions.Count; i++)
			{
				Label grayCellColumn5 = new Label();
				Label grayCellColumn6 = new Label();
				grayCellColumn5.HorizontalAlignment = grayCellColumn6.HorizontalAlignment = graycell_label.HorizontalAlignment;
				grayCellColumn5.VerticalAlignment = grayCellColumn6.VerticalAlignment = graycell_label.VerticalAlignment;
				grayCellColumn5.Background = grayCellColumn6.Background = graycell_label.Background;
				grayCellColumn5.GridColumn = 5;
				grayCellColumn6.GridColumn = 6;
				grayCellColumn5.GridRow = grayCellColumn6.GridRow = i;
				Widgets.Add(grayCellColumn5);
				Widgets.Add(grayCellColumn6);

			}

			// Populate labels in every cell
			for (int i = 1; i < ColumnsProportions.Count; i++)
			{
				// Ignore because there is already the gray cell in the columns 5 and 6
				if (i == 5 || i == 6) continue;

				for (int j = 1; j < RowsProportions.Count; j++)
				{
					Label cardNameLabel = new Label();
					cardNameLabel.Font = gridcontent_label.Font;
					cardNameLabel.TextAlign = gridcontent_label.TextAlign;
					cardNameLabel.Padding = gridcontent_label.Padding;
					cardNameLabel.HorizontalAlignment = gridcontent_label.HorizontalAlignment;
					cardNameLabel.VerticalAlignment = gridcontent_label.VerticalAlignment;
					cardNameLabel.GridColumn = i;
					cardNameLabel.GridRow = j;

					Widgets.Add(cardNameLabel);
				}
			}
		}

		private void WriteFirstColumnsOfRows(List<string> firstColumnOfRows)
		{
			// Populate first columns of the rows
			for (int i = 0; i < firstColumnOfRows.Count; i++)
			{
				Label firstColumnOfRowsLabel = GetLabelFromGridPosition(i + 1, 0);
				firstColumnOfRowsLabel.Text = firstColumnOfRows[i];
			}
		}

		private void StoreFirstRowOfMovableColumns(List<string> firstRowOfMovableColumns)
		{
			for (int i = 0; i < firstRowOfMovableColumns.Count; i++)
			{
				SetContentOfMovableColumns(0, i, firstRowOfMovableColumns[i], Color.Black, null);
			}
		}


		private void UpdateMovableColumns()
		{
			if (ready == false)
				return;

			if (MovableColumnsPosition + NumberOfMovableColumns > NumberOfColumnsInContent)
				throw new Exception("Bad position of movable column");

			for (int i = 0; i < RowsProportions.Count; i++)
			{
				for (int j = 0; j < NumberOfMovableColumns; j++)
				{
					Label label = GetLabelFromGridPosition(i, j + NumberOfFixedColumns);
					MutableLabelProperties mutableLabelProperties = GetMovableColumnsContentFromGridPosition(i, j + NumberOfFixedColumns);

					if (mutableLabelProperties != null)
					{
						//if (mutableLabelProperties.text != null)
							label.Text = mutableLabelProperties.text;
						//if (mutableLabelProperties.textColor != null)
							label.TextColor = mutableLabelProperties.textColor;
						//if (mutableLabelProperties.background != null)
							label.Background = mutableLabelProperties.background;
					}
					else
                    {
						label.Text = "";
						label.TextColor = gridcontent_label.TextColor;
						label.Background = gridcontent_label.Background;
					}
				}
			}
		}

		private void ClearGrid()
		{
			ready = false;

			// Remove all widgets whose gridRow is different than 0 or columns greater than 6/
			Widgets.Where(w => w.GridRow != 0 || w.GridColumn > 6).ToList().ForEach(w => w.RemoveFromParent());

			// Remove all the lines
			// In fact, we loop until there is only 1 row remaining and we delete all others
			while (RowsProportions.Count > 1)
				RowsProportions.Remove(RowsProportions.Last());

			// Remove all the columns
			// In fact, we loop until there is only 7 columns remaining and we delete all others
			while (ColumnsProportions.Count > 7)
				ColumnsProportions.Remove(ColumnsProportions.Last());
		}

		private Label GetLabelFromGridPosition(int row, int column) =>
			Widgets
			.Where(w => w.GridRow == row
				&& w.GridColumn == column
				&& w.GetType() == typeof(Label))
			.Select(w => (Label)w)
			.SingleOrDefault();
			

		private MutableLabelProperties GetMovableColumnsContentFromGridPosition(int row, int column) =>
			contentOfMovableColumns
			.Where(kvp => kvp.Key.X == row && kvp.Key.Y == column - NumberOfFixedColumns + MovableColumnsPosition)
			.Select(kvp => kvp.Value)
			.SingleOrDefault();
	}
}